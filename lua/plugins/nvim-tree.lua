	return {
	"nvim-tree/nvim-tree.lua",
	dependencies = {
		"nvim-tree/nvim-web-devicons",
	},
	config = function()
		-- Note: Les ic√¥nes sont configur√©es dans jetbrains-icons.lua
		-- D√©sactiver netrw (important !)
		vim.g.loaded_netrw = 1
		vim.g.loaded_netrwPlugin = 1

		require("nvim-tree").setup({
			-- Configuration de base
			sort_by = "name",
			view = {
				width = 35,
				side = "left",
			},
			renderer = {
				add_trailing = false,
				group_empty = false,
				highlight_git = true,
				full_name = false,
				highlight_opened_files = "none",
				root_folder_modifier = ":~",
				indent_width = 2,
				indent_markers = {
					enable = true,
					inline_arrows = true,
					icons = {
						corner = "‚îî",
						edge = "‚îÇ",
						item = "‚îÇ",
						none = " ",
					},
				},
				icons = {
					webdev_colors = true,
					git_placement = "before",
					modified_placement = "after",
					padding = " ",
					symlink_arrow = " ‚ûû ",
					show = {
						file = true,
						folder = true,
						folder_arrow = true,
						git = true,
						modified = true,
					},
				glyphs = {
					-- Ic√¥nes Nerd Font modernes
					default = "", -- Fichier par d√©faut
					symlink = "", -- Lien symbolique
					bookmark = "Û∞Ü§", -- Signet
					modified = "‚óè", -- Fichier modifi√© (point)
					folder = {
						-- Fl√®ches pour expand/collapse
						arrow_closed = "‚ñ∂", -- Fl√®che ferm√©e (ou utiliser )
						arrow_open = "‚ñº", -- Fl√®che ouverte (ou utiliser )
						-- Dossiers avec ic√¥nes Nerd Font
						default = "Û∞âã", -- Dossier ferm√©
						open = "Û∞ù∞", -- Dossier ouvert  
						empty = "Û∞âñ", -- Dossier vide
						empty_open = "Û∞∑è", -- Dossier vide ouvert
						symlink = "Û±ßÆ", -- Lien dossier
						symlink_open = "Û±ßØ", -- Lien dossier ouvert
					},
					git = {
						-- Statut Git avec ic√¥nes
						unstaged = "", -- Modifi√©
						staged = "", -- Ajout√© 
						unmerged = "", -- Conflit
						renamed = "‚û°", -- Renomm√©
						untracked = "", -- Non suivi
						deleted = "", -- Supprim√©
						ignored = "‚óå", -- Ignor√©
					},
				},
				},
			},
			filters = {
				dotfiles = false,
				custom = { ".DS_Store" },
			},
			git = {
				enable = true,
				ignore = false,
				show_on_dirs = true,
				timeout = 400,
			},
			actions = {
				use_system_clipboard = true,
				change_dir = {
					enable = true,
					global = false,
					restrict_above_cwd = false,
				},
				open_file = {
					quit_on_open = false,
					resize_window = true,
					window_picker = {
						enable = false, -- D√©sactiv√© pour √©viter blocages
					},
				},
			},
		})

		-- Configuration pour la transparence
		vim.api.nvim_create_autocmd("ColorScheme", {
			pattern = "*",
			callback = function()
				local transparent_groups = {
					"NvimTreeNormal",
					"NvimTreeNormalNC",
					"NvimTreeVertSplit",
					"NvimTreeWinSeparator",
					"NvimTreeEndOfBuffer",
				}
				for _, group in ipairs(transparent_groups) do
					vim.api.nvim_set_hl(0, group, { bg = "NONE" })
				end
			end,
		})

		-- Appliquer imm√©diatement la transparence
		vim.schedule(function()
			local transparent_groups = {
				"NvimTreeNormal",
				"NvimTreeNormalNC",
				"NvimTreeVertSplit",
				"NvimTreeWinSeparator",
				"NvimTreeEndOfBuffer",
			}
			for _, group in ipairs(transparent_groups) do
				vim.api.nvim_set_hl(0, group, { bg = "NONE" })
			end
		end)

		-- Mappings
		vim.keymap.set("n", "<leader>e", "<cmd>NvimTreeToggle<cr>", { desc = "Toggle NvimTree" })
		vim.keymap.set("n", "<leader>E", "<cmd>NvimTreeFindFile<cr>", { desc = "Find current file in NvimTree" })
		
		-- Commande pour tester les ic√¥nes style JetBrains
		vim.api.nvim_create_user_command('TestTreeIcons', function()
			print("=== Test des ic√¥nes JetBrains nvim-tree ===")
			local devicons = require('nvim-web-devicons')
			
			print("Ic√¥nes style JetBrains (lettres color√©es):")
			local test_files = {
				{ "app.js", "JavaScript" },
				{ "main.ts", "TypeScript" },
				{ "component.jsx", "React JSX" },
				{ "config.json", "JSON" },
				{ "init.lua", "Lua" },
				{ "main.py", "Python" },
				{ "main.rs", "Rust" },
				{ "style.css", "CSS" },
				{ "README.md", "Markdown" },
				{ "package.json", "NPM" }
			}
			
			for _, file_info in ipairs(test_files) do
				local file, desc = file_info[1], file_info[2]
				local icon, color = devicons.get_icon(file, vim.fn.fnamemodify(file, ":e"))
				if icon then
					-- Cr√©er un affichage color√© si possible
					if color then
						vim.api.nvim_echo({
							{ icon .. " ", "Normal" },
							{ file .. " ", "Normal" },
							{ "(" .. desc .. ")", "Comment" }
						}, false, {})
					else
						print(string.format("%s %s (%s)", icon, file, desc))
					end
				else
					print(string.format("‚ùå %s (pas d'ic√¥ne %s)", file, desc))
				end
			end
			
			print("\nDossiers et navigation:")
			print("‚ñ∂ [DIR] Dossier ferm√©")
			print("‚ñº [OPEN] Dossier ouvert")
			print("üìÑ Fichier par d√©faut")
			
			print("\nStatut Git:")
			print("M - Modifi√© | A - Ajout√© | D - Supprim√© | ? - Non suivi")
			
			print("\nüéÜ Style JetBrains activ√© !")
			print("Les ic√¥nes utilisent des lettres/sigles au lieu de symboles.")
			print("Ouvrez nvim-tree avec <leader>e pour voir le r√©sultat !")
		end, { desc = "Test des ic√¥nes JetBrains nvim-tree" })
		
		-- Keymap pour tester rapidement
		vim.keymap.set("n", "<leader>ti", "<cmd>TestTreeIcons<cr>", { desc = "Test Tree Icons" })
	end,
}
